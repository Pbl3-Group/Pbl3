@model HeThongTimViec.ViewModels.BaoCaoThongKeViewModel
@{
    ViewData["Title"] = "Báo cáo & Thống kê";
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}

<style>
    :root {
       --primary-gradient: linear-gradient(135deg, #667eea 0%, #2b5189 100%);
        --success-gradient: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        --danger-gradient: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
        --card-shadow: 0 10px 30px rgba(0,0,0,0.1);
        --card-hover-shadow: 0 20px 40px rgba(0,0,0,0.15);
        --glassmorphism: rgba(255, 255, 255, 0.1);
        --border-glass: rgba(255, 255, 255, 0.2);
    }

    /* Modern Container Styling */
    .modern-container {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        min-height: 100vh;
        padding: 2rem 0;
    }

    /* Enhanced Header */
    .report-header {
        background: var(--primary-gradient);
        border-radius: 20px;
        padding: 2rem;
        margin-bottom: 2rem;
        color: white;
        position: relative;
        overflow: hidden;
    }

    .report-header::before {
        content: '';
        position: absolute;
        top: -50%;
        right: -50%;
        width: 200%;
        height: 200%;
        background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
        animation: float 6s ease-in-out infinite;
    }

    @@keyframes float {
        0%, 100% { transform: translateY(0px) rotate(0deg); }
        50% { transform: translateY(-20px) rotate(180deg); }
    }

    .report-title {
        font-size: 2.5rem;
        font-weight: 700;
        margin: 0;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        position: relative;
        z-index: 2;
    }

    /* Enhanced Action Buttons */
    .action-buttons {
        display: flex;
        gap: 1rem;
        position: relative;
        z-index: 2;
    }

    .btn-modern {
        padding: 0.75rem 1.5rem;
        border-radius: 50px;
        border: none;
        font-weight: 600;
        transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        position: relative;
        overflow: hidden;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

    .btn-modern:hover {
        transform: translateY(-3px);
        box-shadow: 0 10px 25px rgba(0,0,0,0.2);
    }

    .btn-modern::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
        transition: left 0.5s;
    }

    .btn-modern:hover::before {
        left: 100%;
    }

    .btn-success-modern {
        background: var(--success-gradient);
        color: white;
    }

    .btn-danger-modern {
        background: var(--danger-gradient);
        color: white;
    }

    /* Modern Tab Navigation */
    .nav-tabs-modern {
        border: none;
        background: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(10px);
        border-radius: 15px;
        padding: 0.5rem;
        margin-bottom: 2rem;
        box-shadow: var(--card-shadow);
    }

    .nav-tabs-modern .nav-item {
        margin: 0;
    }

    .nav-tabs-modern .nav-link {
        border: none;
        border-radius: 10px;
        padding: 1rem 2rem;
        margin: 0 0.25rem;
        transition: all 0.3s ease;
        color: #666;
        font-weight: 600;
        position: relative;
        overflow: hidden;
    }

    .nav-tabs-modern .nav-link:hover {
        background: rgba(102, 126, 234, 0.1);
        color: #667eea;
        transform: translateY(-2px);
    }

    .nav-tabs-modern .nav-link.active {
        background: var(--primary-gradient);
        color: white;
        box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
    }

    .nav-tabs-modern .nav-link::before {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        width: 0;
        height: 3px;
        background: var(--primary-gradient);
        transition: width 0.3s ease;
    }

    .nav-tabs-modern .nav-link:hover::before {
        width: 100%;
    }

    .nav-tabs-modern .nav-link.active::before {
        width: 100%;
    }

    /* Enhanced Export Container */
    .export-container {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(20px);
        border-radius: 20px;
        padding: 2rem;
        box-shadow: var(--card-shadow);
        border: 1px solid var(--border-glass);
        transition: all 0.3s ease;
    }

    .export-container:hover {
        box-shadow: var(--card-hover-shadow);
        transform: translateY(-5px);
    }

    /* Loading Animation */
    .loading-spinner {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 3px solid rgba(255,255,255,.3);
        border-radius: 50%;
        border-top-color: #fff;
        animation: spin 1s ease-in-out infinite;
    }

    @@keyframes spin {
        to { transform: rotate(360deg); }
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .report-header {
            padding: 1.5rem;
            text-align: center;
        }
        
        .report-title {
            font-size: 2rem;
        }
        
        .action-buttons {
            flex-direction: column;
            margin-top: 1rem;
        }
        
        .nav-tabs-modern {
            flex-direction: column;
        }
        
        .nav-tabs-modern .nav-link {
            margin: 0.25rem 0;
        }
    }

    /* Enhanced Card Styles for Charts */
    .chart-card {
        background: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(15px);
        border-radius: 15px;
        padding: 1.5rem;
        margin-bottom: 2rem;
        box-shadow: var(--card-shadow);
        border: 1px solid var(--border-glass);
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }

    .chart-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(102, 126, 234, 0.05), transparent);
        transition: left 0.8s ease;
    }

    .chart-card:hover::before {
        left: 100%;
    }

    .chart-card:hover {
        transform: translateY(-3px);
        box-shadow: var(--card-hover-shadow);
    }

    /* Button Pulse Effect */
    @@keyframes pulse {
        0% { box-shadow: 0 0 0 0 rgba(102, 126, 234, 0.7); }
        70% { box-shadow: 0 0 0 10px rgba(102, 126, 234, 0); }
        100% { box-shadow: 0 0 0 0 rgba(102, 126, 234, 0); }
    }

    .btn-modern:focus {
        outline: none;
        animation: pulse 2s infinite;
    }
</style>

<div class="modern-container">
    <div class="container-fluid">
        <!-- Enhanced Header -->
        <div class="report-header">
            <div class="d-flex justify-content-between align-items-center flex-wrap">
                <h1 class="report-title">📊 Báo cáo & Thống kê</h1>
                <div class="action-buttons">
                    <a asp-action="ExportToExcel" class="btn btn-modern btn-success-modern">
                        <i class="fas fa-file-excel"></i>
                        <span>Xuất Excel</span>
                    </a>
                    <button id="btnExportPdf" class="btn btn-modern btn-danger-modern">
                        <i class="fas fa-file-pdf"></i>
                        <span>Xuất PDF</span>
                    </button>
                </div>
            </div>
        </div>

        <!-- Enhanced Tab Navigation -->
        <ul class="nav nav-tabs nav-tabs-modern" id="reportTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <a class="nav-link @(Model.ActiveTab == "tongquan" ? "active" : "")" asp-action="Index" asp-route-tab="tongquan">
                    <i class="fas fa-chart-line me-2"></i>Tổng quan
                </a>
            </li>
            <li class="nav-item" role="presentation">
                <a class="nav-link @(Model.ActiveTab == "congviec" ? "active" : "")" asp-action="Index" asp-route-tab="congviec">
                    <i class="fas fa-briefcase me-2"></i>Công việc
                </a>
            </li>
            <li class="nav-item" role="presentation">
                <a class="nav-link @(Model.ActiveTab == "ungvien" ? "active" : "")" asp-action="Index" asp-route-tab="ungvien">
                    <i class="fas fa-users me-2"></i>Ứng viên
                </a>
            </li>
            <li class="nav-item" role="presentation">
                <a class="nav-link @(Model.ActiveTab == "nhatuyendung" ? "active" : "")" asp-action="Index" asp-route-tab="nhatuyendung">
                    <i class="fas fa-building me-2"></i>Nhà tuyển dụng
                </a>
            </li>
        </ul>

        <!-- Enhanced Export Container -->
        <div id="export-container" class="export-container">
            <!-- Tab content -->
            <div class="tab-content" id="reportTabsContent">
                @if (Model.ActiveTab == "tongquan")
                {
                    <partial name="_TongQuanPartial" model="Model" />
                }
                @if (Model.ActiveTab == "congviec")
                {
                    <partial name="_CongViecPartial" model="Model" />
                }
                @if (Model.ActiveTab == "ungvien")
                {
                    <partial name="_UngVienPartial" model="Model" />
                }
                @if (Model.ActiveTab == "nhatuyendung")
                {
                    <partial name="_NhaTuyenDungPartial" model="Model" />
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- CDN cho các thư viện xuất PDF và Chart.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    
    <script>
        // Helper function để tạo biểu đồ với enhanced styling
        function createChart(ctx, type, data, options = {}) {
            // Cấu hình mặc định cho tất cả các biểu đồ với modern styling
            const defaultOptions = {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'top',
                        labels: {
                            usePointStyle: true,
                            padding: 20,
                            font: {
                                size: 12,
                                family: 'Inter, sans-serif'
                            }
                        }
                    },
                    tooltip: {
                        backgroundColor: 'rgba(0, 0, 0, 0.8)',
                        titleColor: 'white',
                        bodyColor: 'white',
                        cornerRadius: 10,
                        padding: 12,
                        displayColors: true,
                        callbacks: {
                            label: function(context) {
                                let label = context.dataset.label || '';
                                if (label) {
                                    label += ': ';
                                }
                                if (context.parsed.y !== null) {
                                    label += new Intl.NumberFormat('vi-VN').format(context.parsed.y);
                                }
                                return label;
                            }
                        }
                    }
                },
                elements: {
                    arc: {
                        borderWidth: 3,
                        borderColor: '#fff'
                    },
                    bar: {
                        borderRadius: 8,
                        borderSkipped: false
                    },
                    line: {
                        tension: 0.4,
                        borderWidth: 3
                    },
                    point: {
                        radius: 6,
                        hoverRadius: 8,
                        borderWidth: 2,
                        backgroundColor: '#fff'
                    }
                }
            };

            const finalOptions = { ...defaultOptions, ...options };

            // Đặc biệt cho biểu đồ thanh ngang với gradient
            if (options.indexAxis === 'y') {
                finalOptions.scales = {
                    x: {
                        beginAtZero: true,
                        grid: {
                            color: 'rgba(0, 0, 0, 0.1)'
                        }
                    },
                    y: {
                        grid: {
                            display: false
                        }
                    }
                };
            }

            // Add gradient colors for better visual appeal
            if (data.datasets) {
                data.datasets.forEach((dataset, index) => {
                    if (type === 'line') {
                        const gradient = ctx.createLinearGradient(0, 0, 0, 400);
                        gradient.addColorStop(0, `rgba(102, 126, 234, 0.8)`);
                        gradient.addColorStop(1, `rgba(118, 75, 162, 0.1)`);
                        dataset.backgroundColor = gradient;
                        dataset.borderColor = '#667eea';
                    }
                });
            }

            return new Chart(ctx, { type, data, options: finalOptions });
        }

        document.addEventListener("DOMContentLoaded", function () {
            // Enhanced loading animation
            function showLoading(button) {
                const icon = button.querySelector('i');
                const span = button.querySelector('span');
                
                icon.className = 'loading-spinner';
                span.textContent = 'Đang xử lý...';
                button.disabled = true;
            }

            function hideLoading(button, originalIcon, originalText) {
                const icon = button.querySelector('i');
                const span = button.querySelector('span');
                
                icon.className = originalIcon;
                span.textContent = originalText;
                button.disabled = false;
            }

            // Tab Tổng quan
            if (document.getElementById('jobTrendChart')) createChart(document.getElementById('jobTrendChart').getContext('2d'), 'line', @Html.Raw(Json.Serialize(Model.JobTrendChart)));
            if (document.getElementById('jobStatusChart')) createChart(document.getElementById('jobStatusChart').getContext('2d'), 'doughnut', @Html.Raw(Json.Serialize(Model.JobStatusChart)));
            if (document.getElementById('jobLocationChart')) createChart(document.getElementById('jobLocationChart').getContext('2d'), 'pie', @Html.Raw(Json.Serialize(Model.JobLocationChart)));
            if (document.getElementById('candidateTrendChart')) createChart(document.getElementById('candidateTrendChart').getContext('2d'), 'line', @Html.Raw(Json.Serialize(Model.CandidateTrendChart)));

            // Tab Công việc
            if (document.getElementById('jobTypeDistributionChart')) createChart(document.getElementById('jobTypeDistributionChart').getContext('2d'), 'pie', @Html.Raw(Json.Serialize(Model.JobTypeDistributionChart)));
            if (document.getElementById('popularIndustriesChart')) createChart(document.getElementById('popularIndustriesChart').getContext('2d'), 'bar', @Html.Raw(Json.Serialize(Model.PopularIndustriesChart)), { indexAxis: 'y' });
            if (document.getElementById('posterTypeChart')) createChart(document.getElementById('posterTypeChart').getContext('2d'), 'doughnut', @Html.Raw(Json.Serialize(Model.PosterTypeChart)));

            // Tab Ứng viên
            if (document.getElementById('candidateAgeChart')) createChart(document.getElementById('candidateAgeChart').getContext('2d'), 'pie', @Html.Raw(Json.Serialize(Model.CandidateAgeChart)));
            if (document.getElementById('candidateExperienceChart')) createChart(document.getElementById('candidateExperienceChart').getContext('2d'), 'doughnut', @Html.Raw(Json.Serialize(Model.CandidateExperienceChart)));

            // Tab Nhà tuyển dụng
            if (document.getElementById('employerSizeChart')) createChart(document.getElementById('employerSizeChart').getContext('2d'), 'pie', @Html.Raw(Json.Serialize(Model.EmployerSizeChart)));
            if (document.getElementById('employerIndustryChart')) createChart(document.getElementById('employerIndustryChart').getContext('2d'), 'bar', @Html.Raw(Json.Serialize(Model.EmployerIndustryChart)), { indexAxis: 'y' });
            if (document.getElementById('employerLocationChart')) createChart(document.getElementById('employerLocationChart').getContext('2d'), 'doughnut', @Html.Raw(Json.Serialize(Model.EmployerLocationChart)));

            // === ENHANCED PDF EXPORT SCRIPT ===
            const { jsPDF } = window.jspdf;
            document.getElementById('btnExportPdf').addEventListener('click', function () {
                const elementToExport = document.getElementById('export-container');
                const reportTitle = "BaoCaoThongKe_Joxflex_@(DateTime.Now.ToString("yyyyMMdd"))";
                
                showLoading(this);

                // Add a small delay for better UX
                setTimeout(() => {
                    html2canvas(elementToExport, { 
                        scale: 2, 
                        useCORS: true,
                        backgroundColor: '#ffffff',
                        allowTaint: true,
                        logging: false
                    }).then(canvas => {
                        const imgData = canvas.toDataURL('image/png');
                        const pdf = new jsPDF('p', 'mm', 'a4');
                        const imgProps = pdf.getImageProperties(imgData);
                        const pdfWidth = pdf.internal.pageSize.getWidth();
                        const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width;
                        
                        pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);
                        pdf.save(reportTitle + '.pdf');

                        hideLoading(this, 'fas fa-file-pdf', 'Xuất PDF');
                        
                        // Success feedback
                        this.style.animation = 'pulse 0.5s ease-in-out';
                        setTimeout(() => {
                            this.style.animation = '';
                        }, 500);
                        
                    }).catch(err => {
                        console.error("Lỗi khi xuất PDF: ", err);
                        alert("Đã xảy ra lỗi khi tạo file PDF.");
                        hideLoading(this, 'fas fa-file-pdf', 'Xuất PDF');
                    });
                }, 300);
            });

            // Add smooth scrolling for tab navigation
            document.querySelectorAll('.nav-tabs-modern .nav-link').forEach(link => {
                link.addEventListener('click', function(e) {
                    // Smooth transition effect
                    document.getElementById('export-container').style.opacity = '0.7';
                    setTimeout(() => {
                        document.getElementById('export-container').style.opacity = '1';
                    }, 150);
                });
            });
        });
    </script>
}